====
---- QUERY
-- this is a test for a comment line above a blank line
-- we do not care about the results, just the comment

select * from functional.alltypestiny;
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
====
---- QUERY
create table calcite_alltypes as select * from functional.alltypes order by id limit 5;
---- RUNTIME_PROFILE
row_regex: .*PlannerType: OriginalPlanner.*
====
---- QUERY
select * from calcite_alltypes;
---- RESULTS
0,true,0,0,0,0,0,0,'01/01/09','0',2009-01-01 00:00:00,2009,1
1,false,1,1,1,10,1.100000023841858,10.1,'01/01/09','1',2009-01-01 00:01:00,2009,1
2,true,2,2,2,20,2.200000047683716,20.2,'01/01/09','2',2009-01-01 00:02:00.100000000,2009,1
3,false,3,3,3,30,3.299999952316284,30.3,'01/01/09','3',2009-01-01 00:03:00.300000000,2009,1
4,true,4,4,4,40,4.400000095367432,40.4,'01/01/09','4',2009-01-01 00:04:00.600000000,2009,1
---- TYPES
int,boolean,tinyint,smallint,int,bigint,float,double,string,string,timestamp,int,int
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
====
---- QUERY
select string_col, tinyint_col from calcite_alltypes;
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
---- RESULTS
'0',0
'1',1
'2',2
'3',3
'4',4
---- TYPES
string,tinyint
====
---- QUERY
select d1,d2,d3,d4,d5,d6 from functional.decimal_tbl;
---- RESULTS
1234,2222,1.2345678900,0.12345678900000000000000000000000000000,12345.78900,1
12345,333,123.4567890000,0.12345678900000000000000000000000000000,11.22000,1
12345,333,1234.5678900000,0.12345678900000000000000000000000000000,0.10000,1
132842,333,12345.6789000000,0.12345678900000000000000000000000000000,0.77889,1
2345,111,12.3456789000,0.12345678900000000000000000000000000000,3.14100,1
---- TYPES
decimal,decimal,decimal,decimal,decimal,decimal
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
====
---- QUERY
select * from functional.chars_tiny;
---- RESULTS
'1aaaa','1bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb','1cccc'
'2aaaa','2bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb','2cccccc'
'3aaa ','3bbbbb                                                                                                                                      ','3ccc'
'4aa  ','4bbbb                                                                                                                                       ','4cc'
'5a   ','5bbb                                                                                                                                        ','5c'
'6a   ','6b                                                                                                                                          ','6c'
'6a   ','6b                                                                                                                                          ','6c'
'NULL','NULL','NULL'
'a    ','b                                                                                                                                           ','c'
---- TYPES
# varchar shows up as string, just as it does in the chars.test file
char,char,string
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
====
---- QUERY
select * from functional.date_tbl;
---- RESULTS
0,0001-01-01,0001-01-01
1,0001-12-31,0001-01-01
10,2017-11-28,1399-06-27
11,NULL,1399-06-27
12,2018-12-31,1399-06-27
2,0002-01-01,0001-01-01
20,0001-06-21,2017-11-27
21,0001-06-22,2017-11-27
22,0001-06-23,2017-11-27
23,0001-06-24,2017-11-27
24,0001-06-25,2017-11-27
25,0001-06-26,2017-11-27
26,0001-06-27,2017-11-27
27,0001-06-28,2017-11-27
28,0001-06-29,2017-11-27
29,2017-11-28,2017-11-27
3,1399-12-31,0001-01-01
30,9999-12-01,9999-12-31
31,9999-12-31,9999-12-31
4,2017-11-28,0001-01-01
5,9999-12-31,0001-01-01
6,NULL,0001-01-01
---- TYPES
int,date,date
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
====
---- QUERY
# creating a new table. We cannot use any functions at this point to
# manipulate the binary data (as the binary test currently does), so
# this just grabs the rows that can be checked.
create table ascii_binary as select * from functional.binary_tbl where id <= 4;
select * from ascii_binary;
---- RESULTS
1,'ascii','binary1'
2,'ascii','binary2'
3,'null','NULL'
4,'empty',''
---- TYPES
int,string,binary
---- RUNTIME_PROFILE
row_regex: .*PlannerType: CalcitePlanner.*
====
---- QUERY
# Tiny test for Calcite. At the point of this commit, very few functions work. This
# is a test that includes one of the functions that does.
# The ultimate goal is to include all tests in the testing framework, so there is
# no need to be extensive about testing in this file.
select bigint_col, abs(cast(-3 as bigint)), abs(-3000000000) from functional.alltypestiny;
---- RESULTS
0,3,3000000000
10,3,3000000000
0,3,3000000000
10,3,3000000000
0,3,3000000000
10,3,3000000000
0,3,3000000000
10,3,3000000000
---- TYPES
bigint,bigint,bigint
====
---- QUERY
# Tiny test for Calcite. At the point of this commit, very few functions work. This
# is a test that includes one of the functions that does.
# The ultimate goal is to include all tests in the testing framework, so there is
# no need to be extensive about testing in this file.
select cast(cast('2005-12-13 08:00:00' as string)  AS TIMESTAMP) from functional.alltypestiny;
---- RESULTS
2005-12-13 08:00:00
2005-12-13 08:00:00
2005-12-13 08:00:00
2005-12-13 08:00:00
2005-12-13 08:00:00
2005-12-13 08:00:00
2005-12-13 08:00:00
2005-12-13 08:00:00
---- TYPES
timestamp
====
---- QUERY
select * from calcite_alltypes where bigint_col = 20;
---- RESULTS
2,true,2,2,2,20,2.200000047683716,20.2,'01/01/09','2',2009-01-01 00:02:00.100000000,2009,1
---- TYPES
int,boolean,tinyint,smallint,int,bigint,float,double,string,string,timestamp,int,int
====
---- QUERY
select tinyint_col from calcite_alltypes where bigint_col = 20;
---- RESULTS
2
---- TYPES
tinyint
====
---- QUERY
# Values test
select abs(cast(-8 as bigint));
---- RESULTS
8
---- TYPES
bigint
====
---- QUERY
# TODO: Char types are not yet supported, see comment in ImpalaValuesRel for details.
select 'hello'
---- CATCH
Char type values are not yet supported.
====
---- QUERY
# Union test
select 3 union select 4;
---- RESULTS
3
4
---- TYPES
# IMPALA-13022: Calcite always casts literal numbers as INT. To avoid backward compatibility
# issues, the return type should be TINYINT here. There are many tests in the Impala
# test suite which will have this problem.
int
====
---- QUERY
select * from (values (1)) union (values (2), (3));
---- RESULTS
1
2
3
---- TYPES
# IMPALA-13022: Calcite always casts literal numbers as INT. To avoid backward compatibility
# issues, the return type should be TINYINT here. There are many tests in the Impala
# test suite which will have this problem.
int
====
---- QUERY
# sort test
select id, abs(bigint_col) from functional.alltypestiny where id > 3 order by abs(bigint_col), id;
---- RESULTS
4,0
6,0
5,10
7,10
---- TYPES
int, bigint
====
---- QUERY
# sort test
select id, abs(bigint_col) from functional.alltypestiny where id >= 3 order by abs(bigint_col), id;
---- RESULTS
4,0
6,0
3,10
5,10
7,10
---- TYPES
int, bigint
====
---- QUERY
# sort test
select id, abs(bigint_col) from functional.alltypestiny where id < 3 order by abs(bigint_col), id;
---- RESULTS
0,0
2,0
1,10
---- TYPES
int, bigint
====
---- QUERY
# sort test
select id, abs(bigint_col) from functional.alltypestiny where id <= 3 order by abs(bigint_col), id;
---- RESULTS
0,0
2,0
1,10
3,10
---- TYPES
int, bigint
====
---- QUERY
# sort test
select id, abs(bigint_col) from functional.alltypestiny where id != 3 order by abs(bigint_col), id;
---- RESULTS
0,0
2,0
4,0
6,0
1,10
5,10
7,10
---- TYPES
int, bigint
====
---- QUERY
# sort test
select id, abs(bigint_col) from functional.alltypestiny where id != 3 order by abs(bigint_col) desc, id;
---- RESULTS
1,10
5,10
7,10
0,0
2,0
4,0
6,0
---- TYPES
int, bigint
====
---- QUERY
# sort test
select group_str, some_nulls from functional.nullrows where group_str = 'a' order by some_nulls  nulls first;
---- RESULTS
'a','NULL'
'a','NULL'
'a','NULL'
'a','NULL'
'a','a'
---- TYPES
string, string
====
---- QUERY
# sort test
select group_str, some_nulls from functional.nullrows where group_str = 'a' order by some_nulls  nulls last;
---- RESULTS
'a','a'
'a','NULL'
'a','NULL'
'a','NULL'
'a','NULL'
---- TYPES
string, string
====
---- QUERY
# limit test
select bigint_col from functional.alltypestiny where bigint_col = 0 limit 2;
---- RESULTS
0
0
---- TYPES
bigint
====
---- QUERY
# limit test
select id, abs(bigint_col) from functional.alltypestiny where id > 2 order by abs(bigint_col), id limit 3;
---- RESULTS
4,0
6,0
3,10
---- TYPES
int, bigint
====
---- QUERY
# aggregation test
select sum(bigint_col) from functional.alltypestiny;
---- RESULTS
40
---- TYPES
bigint
====
---- QUERY
# aggregation test
select id, sum(bigint_col) from functional.alltypestiny group by id order by id;
---- RESULTS
0,0
1,10
2,0
3,10
4,0
5,10
6,0
7,10
---- TYPES
int, bigint
====
---- QUERY
# aggregation test
select id, sum(bigint_col) from functional.alltypestiny group by id
having sum(bigint_col) > cast(5 as bigint)  order by id;
---- RESULTS
1,10
3,10
5,10
7,10
---- TYPES
int, bigint
====
---- QUERY
# aggregation test
select id, bigint_col, sum(bigint_col)
from functional.alltypestiny
group by grouping sets((id, bigint_col), (id), (bigint_col))
order by id, bigint_col;
---- RESULTS
0,0,0
0,NULL,0
1,10,10
1,NULL,10
2,0,0
2,NULL,0
3,10,10
3,NULL,10
4,0,0
4,NULL,0
5,10,10
5,NULL,10
6,0,0
6,NULL,0
7,10,10
7,NULL,10
NULL,0,0
NULL,10,40
---- TYPES
int, bigint, bigint
====
---- QUERY
# having test
select id, sum(bigint_col) from functional.alltypestiny group by id having sum(bigint_col) > cast(5 as bigint) order by id;
---- RESULTS
1,10
3,10
5,10
7,10
---- TYPES
int, bigint
====
---- QUERY
# join test
select a.id, a.bigint_col, b.bigint_col
from functional.alltypestiny a
join functional.alltypessmall b
on (a.id = b.id) order by a.id;
---- RESULTS
0,0,0
1,10,10
2,0,20
3,10,30
4,0,40
5,10,50
6,0,60
7,10,70
---- TYPES
int, bigint, bigint
====
---- QUERY
# join inequality test
select a.id, b.id, a.bigint_col, b.bigint_col
from functional.alltypestiny a
join functional.alltypessmall b
on (b.id < a.id)
where b.id = 0
order by a.id;
---- RESULTS
1,0,10,0
2,0,0,0
3,0,10,0
4,0,0,0
5,0,10,0
6,0,0,0
7,0,10,0
---- TYPES
int, int, bigint,  bigint
====
---- QUERY
# cross join test
select a.id, b.id, a.bigint_col, b.bigint_col
from functional.alltypestiny a, functional.alltypessmall b
where b.id < 2
order by a.id, b.id;
---- RESULTS
0,0,0,0
0,1,0,10
1,0,10,0
1,1,10,10
2,0,0,0
2,1,0,10
3,0,10,0
3,1,10,10
4,0,0,0
4,1,0,10
5,0,10,0
5,1,10,10
6,0,0,0
6,1,0,10
7,0,10,0
7,1,10,10
---- TYPES
int, int, bigint, bigint
====
---- QUERY
# left outer join test
select a.id, a.bigint_col, b.bigint_col
from functional.alltypessmall a
left outer join functional.alltypestiny b
on (a.id = b.id)
where a.id < 20
order by a.id
---- RESULTS
0,0,0
1,10,10
2,20,0
3,30,10
4,40,0
5,50,10
6,60,0
7,70,10
8,80,NULL
9,90,NULL
10,0,NULL
11,10,NULL
12,20,NULL
13,30,NULL
14,40,NULL
15,50,NULL
16,60,NULL
17,70,NULL
18,80,NULL
19,90,NULL
---- TYPES
int, bigint, bigint
====
